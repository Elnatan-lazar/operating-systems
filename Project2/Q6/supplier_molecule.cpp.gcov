        -:    0:Source:supplier_molecule.cpp
        -:    0:Graph:supplier_molecule.gcno
        -:    0:Data:supplier_molecule.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include <string>
        -:    3:#include <cstring>
        -:    4:#include <cstdlib>
        -:    5:#include <unistd.h>
        -:    6:#include <netdb.h>
        -:    7:#include <sys/un.h>
        -:    8:#include <getopt.h>
        -:    9:
        -:   10:#define BUFFER_SIZE 1024
        -:   11:
        -:   12:static std::string client_path;
        -:   13:
    #####:   14:static void cleanup_client_socket() {
    #####:   15:    unlink(client_path.c_str());
    #####:   16:}
        -:   17:
        1:   18:int main(int argc, char *argv[]) {
        1:   19:    std::string hostname, port_str, sockfile;
        -:   20:    int opt;
        1:   21:    struct option long_opts[] = {
        -:   22:            {"host", required_argument, nullptr, 'h'},
        -:   23:            {"port", required_argument, nullptr, 'p'},
        -:   24:            {"file", required_argument, nullptr, 'f'},
        -:   25:            {nullptr, 0, nullptr, 0}
        -:   26:    };
        -:   27:
        3:   28:    while ((opt = getopt_long(argc, argv, "h:p:f:", long_opts, nullptr)) != -1) {
        2:   29:        switch (opt) {
        1:   30:            case 'h': hostname = optarg; break;
        1:   31:            case 'p': port_str = optarg; break;
    #####:   32:            case 'f': sockfile = optarg; break;
    #####:   33:            default:
    #####:   34:                std::cerr << "Usage: " << argv[0] << " [-h <hostname> -p <port>] | [-f <socket_file>]" << std::endl;
    #####:   35:                return 1;
        -:   36:        }
        -:   37:    }
        -:   38:
       1*:   39:    if ((!hostname.empty() || !port_str.empty()) && !sockfile.empty()) {
    #####:   40:        std::cerr << "Error: cannot specify both hostname/port and socket file (-f)." << std::endl;
    #####:   41:        return 1;
        -:   42:    }
        -:   43:
        1:   44:    int sock = -1;
        1:   45:    sockaddr_storage serv_addr{};
        -:   46:    socklen_t serv_len;
        -:   47:
        1:   48:    if (!sockfile.empty()) {
    #####:   49:        sock = socket(AF_UNIX, SOCK_DGRAM, 0);
        -:   50:
        -:   51:        // Create unique client socket file
    #####:   52:        client_path = "/tmp/client_dgram_" + std::to_string(getpid());
    #####:   53:        sockaddr_un client_addr{};
    #####:   54:        client_addr.sun_family = AF_UNIX;
    #####:   55:        strcpy(client_addr.sun_path, client_path.c_str());
    #####:   56:        unlink(client_path.c_str());
    #####:   57:        bind(sock, (sockaddr*)&client_addr, sizeof(client_addr));
        -:   58:
    #####:   59:        sockaddr_un server_addr{};
    #####:   60:        server_addr.sun_family = AF_UNIX;
    #####:   61:        strcpy(server_addr.sun_path, sockfile.c_str());
        -:   62:
    #####:   63:        serv_len = sizeof(server_addr);
    #####:   64:        memcpy(&serv_addr, &server_addr, serv_len);
        -:   65:
    #####:   66:        atexit(cleanup_client_socket);  // במקום ה-lambda
        -:   67:    } else {
       1*:   68:        if (hostname.empty() || port_str.empty()) {
    #####:   69:            std::cerr << "Hostname/port or socket file is required!" << std::endl;
    #####:   70:            return 1;
        -:   71:        }
        1:   72:        struct addrinfo hints{}, *res;
        1:   73:        hints.ai_family = AF_UNSPEC;
        1:   74:        hints.ai_socktype = SOCK_DGRAM;
        1:   75:        int err = getaddrinfo(hostname.c_str(), port_str.c_str(), &hints, &res);
        1:   76:        if (err != 0) {
    #####:   77:            std::cerr << "getaddrinfo: " << gai_strerror(err) << std::endl;
    #####:   78:            return 1;
        -:   79:        }
        1:   80:        sock = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
        1:   81:        serv_len = res->ai_addrlen;
        1:   82:        memcpy(&serv_addr, res->ai_addr, serv_len);
        1:   83:        freeaddrinfo(res);
        -:   84:    }
        -:   85:
        1:   86:    sockaddr_storage server_addr_copy = serv_addr;
        -:   87:
        1:   88:    std::string input;
        -:   89:    while (true) {
        8:   90:        std::cout << "Enter UDP command (or 'exit'): ";
        8:   91:        std::getline(std::cin, input);
        8:   92:        if (input == "exit") break;
        -:   93:
        7:   94:        sendto(sock, input.c_str(), input.size(), 0, (sockaddr*)&server_addr_copy, serv_len);
        -:   95:
        -:   96:        char buf[BUFFER_SIZE];
        7:   97:        int n = recvfrom(sock, buf, sizeof(buf)-1, 0, nullptr, nullptr);
        7:   98:        buf[n] = '\0';
        7:   99:        std::cout << "Server response: " << buf << std::endl;
        7:  100:    }
        -:  101:
        1:  102:    close(sock);
        1:  103:    return 0;
        1:  104:}
