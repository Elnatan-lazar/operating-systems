        -:    0:Source:client_bar.cpp
        -:    0:Graph:client_bar.gcno
        -:    0:Data:client_bar.gcda
        -:    0:Runs:3
        -:    1:#include <iostream>
        -:    2:#include <string>
        -:    3:#include <cstring>
        -:    4:#include <unistd.h>
        -:    5:#include <netdb.h>
        -:    6:#include <arpa/inet.h>
        -:    7:#include <sys/socket.h>
        -:    8:
        -:    9:#define BUFFER_SIZE 1024
        -:   10:
        3:   11:int main(int argc, char *argv[]) {
        3:   12:    if (argc != 4) {
        1:   13:        std::cerr << "Usage: " << argv[0] << " <tcp|udp> <hostname> <port>" << std::endl;
        1:   14:        return 1;
        -:   15:    }
        2:   16:    std::string mode = argv[1];
        2:   17:    const char *hostname = argv[2];
        2:   18:    int port = std::stoi(argv[3]);
        -:   19:
        2:   20:    if (mode == "tcp") {
        1:   21:        int sock = socket(AF_INET, SOCK_STREAM, 0);
        1:   22:        hostent *server = gethostbyname(hostname);
        1:   23:        sockaddr_in serv_addr{};
        1:   24:        serv_addr.sin_family = AF_INET;
        1:   25:        bcopy(server->h_addr, &serv_addr.sin_addr.s_addr, server->h_length);
        1:   26:        serv_addr.sin_port = htons(port);
        1:   27:        connect(sock, (sockaddr*)&serv_addr, sizeof(serv_addr));
        -:   28:
        1:   29:        std::string line;
        -:   30:        while (true) {
        7:   31:            std::cout << "TCP> ";
        7:   32:            std::getline(std::cin, line);
        7:   33:            if (line == "exit") break;
        6:   34:            send(sock, line.c_str(), line.size(), 0);
        -:   35:        }
        1:   36:        close(sock);
        -:   37:
        2:   38:    } else if (mode == "udp") {
        1:   39:        int sock = socket(AF_INET, SOCK_DGRAM, 0);
        1:   40:        hostent *server = gethostbyname(hostname);
        1:   41:        sockaddr_in serv_addr{};
        1:   42:        serv_addr.sin_family = AF_INET;
        1:   43:        bcopy(server->h_addr, &serv_addr.sin_addr.s_addr, server->h_length);
        1:   44:        serv_addr.sin_port = htons(port);
        -:   45:
        1:   46:        std::string line;
        -:   47:        while (true) {
       10:   48:            std::cout << "UDP> ";
       10:   49:            std::getline(std::cin, line);
       10:   50:            if (line == "exit") break;
        9:   51:            sendto(sock, line.c_str(), line.size(), 0, (sockaddr*)&serv_addr, sizeof(serv_addr));
        -:   52:            char buf[BUFFER_SIZE];
        9:   53:            socklen_t serv_len = sizeof(serv_addr);
        9:   54:            int n = recvfrom(sock, buf, sizeof(buf)-1, 0, (sockaddr*)&serv_addr, &serv_len);
        9:   55:            buf[n] = '\0';
        9:   56:            std::cout << "Server: " << buf << std::endl;
        9:   57:        }
        1:   58:        close(sock);
        1:   59:    } else {
    #####:   60:        std::cerr << "Invalid mode!" << std::endl;
        -:   61:    }
        2:   62:    return 0;
        2:   63:}
