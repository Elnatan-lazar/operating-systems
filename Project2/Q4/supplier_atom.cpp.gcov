        -:    0:Source:supplier_atom.cpp
        -:    0:Graph:supplier_atom.gcno
        -:    0:Data:supplier_atom.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include <string>
        -:    3:#include <sstream>
        -:    4:#include <cstring>
        -:    5:#include <cstdlib>
        -:    6:#include <unistd.h>
        -:    7:#include <netdb.h>
        -:    8:#include <getopt.h>
        -:    9:
        -:   10:#define BUFFER_SIZE 1024
        -:   11:
        1:   12:int main(int argc, char *argv[]) {
        1:   13:    std::string hostname;
        1:   14:    std::string port_str;
        -:   15:
        -:   16:    int opt;
        1:   17:    struct option long_opts[] = {
        -:   18:            {"host", required_argument, nullptr, 'h'},
        -:   19:            {"port", required_argument, nullptr, 'p'},
        -:   20:            {nullptr, 0, nullptr, 0}
        -:   21:    };
        -:   22:
        3:   23:    while ((opt = getopt_long(argc, argv, "h:p:", long_opts, nullptr)) != -1) {
        2:   24:        switch (opt) {
        1:   25:            case 'h': hostname = optarg; break;
        1:   26:            case 'p': port_str = optarg; break;
    #####:   27:            default:
    #####:   28:                std::cerr << "Usage: " << argv[0] << " -h <hostname> -p <port>" << std::endl;
    #####:   29:                return 1;
        -:   30:        }
        -:   31:    }
        -:   32:
       1*:   33:    if (hostname.empty() || port_str.empty()) {
    #####:   34:        std::cerr << "Hostname and port are required!" << std::endl;
    #####:   35:        return 1;
        -:   36:    }
        -:   37:
        -:   38:    // getaddrinfo
        1:   39:    struct addrinfo hints{}, *res;
        1:   40:    hints.ai_family = AF_UNSPEC;      // IPv4 או IPv6
        1:   41:    hints.ai_socktype = SOCK_STREAM;  // TCP
        -:   42:
        1:   43:    int err = getaddrinfo(hostname.c_str(), port_str.c_str(), &hints, &res);
        1:   44:    if (err != 0) {
    #####:   45:        std::cerr << "getaddrinfo: " << gai_strerror(err) << std::endl;
    #####:   46:        return 1;
        -:   47:    }
        -:   48:
        -:   49:    // יצירת socket וחיבור
        1:   50:    int sock = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
        1:   51:    if (sock == -1) {
    #####:   52:        perror("socket");
    #####:   53:        freeaddrinfo(res);
    #####:   54:        return 1;
        -:   55:    }
        -:   56:
        1:   57:    if (connect(sock, res->ai_addr, res->ai_addrlen) == -1) {
    #####:   58:        perror("connect");
    #####:   59:        freeaddrinfo(res);
    #####:   60:        close(sock);
    #####:   61:        return 1;
        -:   62:    }
        -:   63:
        1:   64:    freeaddrinfo(res);
        -:   65:
        1:   66:    std::string input;
        -:   67:    while (true) {
        8:   68:        std::cout << "Enter TCP command (or 'exit'): ";
        8:   69:        std::getline(std::cin, input);
        8:   70:        if (input == "exit") break;
        -:   71:
        7:   72:        send(sock, input.c_str(), input.size(), 0);
        -:   73:    }
        -:   74:
        1:   75:    close(sock);
        1:   76:    return 0;
        1:   77:}
