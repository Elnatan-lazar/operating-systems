        -:    0:Source:drinks_bar.cpp
        -:    0:Graph:drinks_bar.gcno
        -:    0:Data:drinks_bar.gcda
        -:    0:Runs:11
        -:    1:#include <iostream>
        -:    2:#include <string>
        -:    3:#include <sstream>
        -:    4:#include <cstring>
        -:    5:#include <cstdlib>
        -:    6:#include <unordered_map>
        -:    7:#include <unistd.h>
        -:    8:#include <arpa/inet.h>
        -:    9:#include <sys/socket.h>
        -:   10:#include <sys/un.h>
        -:   11:#include <sys/select.h>
        -:   12:#include <getopt.h>
        -:   13:#include <csignal>
        -:   14:#include <algorithm>
        -:   15:
        -:   16:#define MAX_CLIENTS 100
        -:   17:#define BUFFER_SIZE 1024
        -:   18:
        -:   19:std::unordered_map<std::string, unsigned long long> atom_inventory;
        -:   20:const unsigned long long MAX_ATOMS = 1000000000000000000ULL;
        -:   21:
        -:   22:int tcp_port = -1, udp_port = -1, timeout_sec = 0;
        -:   23:std::string uds_stream_path, uds_dgram_path;
        -:   24:
       13:   25:void print_inventory() {
       13:   26:    std::cout << "Inventory:" << std::endl;
       62:   27:    for (const auto &pair : atom_inventory)
       49:   28:        std::cout << pair.first << ": " << pair.second << std::endl;
       13:   29:    std::cout << std::endl;
       13:   30:}
        -:   31:
    #####:   32:void handle_alarm(int sig) {
    #####:   33:    std::cout << "No activity for " << timeout_sec << " seconds. Shutting down server." << std::endl;
    #####:   34:    exit(0);
        -:   35:}
        -:   36:
       13:   37:void process_tcp_command(const std::string &cmd) {
       13:   38:    std::cout << "Received TCP command: " << cmd << std::endl;
       13:   39:    std::istringstream iss(cmd);
       13:   40:    std::string action, atom;
        -:   41:    unsigned long long number;
       13:   42:    if (iss >> action >> atom >> number && action == "ADD") {
        8:   43:        if (atom != "CARBON" && atom != "OXYGEN" && atom != "HYDROGEN") {
        1:   44:            std::cerr << "Invalid atom type!" << std::endl;
        1:   45:            return;
        -:   46:        }
        7:   47:        atom_inventory[atom] = std::min(MAX_ATOMS, atom_inventory[atom] + number);
        7:   48:        print_inventory();
        -:   49:    } else {
        5:   50:        std::cerr << "Invalid TCP command!" << std::endl;
        -:   51:    }
       15:   52:}
        -:   53:
        8:   54:bool process_udp_command(const std::string &cmd) {
        8:   55:    std::cout << "Received UDP command: " << cmd << std::endl;
        8:   56:    std::istringstream iss(cmd);
        8:   57:    std::string action, molecule;
        -:   58:    unsigned long long number;
        -:   59:
        8:   60:    if (!(iss >> action >> molecule) || action != "DELIVER") {
        1:   61:        std::cerr << "Invalid UDP command!" << std::endl;
        1:   62:        return false;
        -:   63:    }
        -:   64:
        7:   65:    unsigned long long needed_C=0, needed_O=0, needed_H=0;
        7:   66:    std::string molecule_name = molecule;
        -:   67:
        7:   68:    if (molecule == "CARBON") {
        1:   69:        std::string second_word;
       1*:   70:        if (!(iss >> second_word) || second_word != "DIOXIDE") {
    #####:   71:            std::cerr << "Invalid molecule! Expected 'CARBON DIOXIDE'" << std::endl;
    #####:   72:            return false;
        -:   73:        }
        1:   74:        molecule_name = "CARBON DIOXIDE";
        1:   75:    }
        -:   76:
        7:   77:    if (!(iss >> number)) {
        1:   78:        std::cerr << "Missing number!" << std::endl;
        1:   79:        return false;
        -:   80:    }
        -:   81:
        6:   82:    if (molecule_name == "WATER") {
        1:   83:        needed_H=2*number; needed_O=1*number;
        5:   84:    } else if (molecule_name == "ALCOHOL") {
        2:   85:        needed_C=2*number; needed_H=6*number; needed_O=1*number;
        3:   86:    } else if (molecule_name == "GLUCOSE") {
        1:   87:        needed_C=6*number; needed_H=12*number; needed_O=6*number;
        2:   88:    } else if (molecule_name == "CARBON DIOXIDE") {
        1:   89:        needed_C=1*number; needed_O=2*number;
        -:   90:    } else {
        1:   91:        std::cerr << "Invalid molecule!" << std::endl;
        1:   92:        return false;
        -:   93:    }
        -:   94:
        5:   95:    if (atom_inventory["CARBON"]>=needed_C && atom_inventory["OXYGEN"]>=needed_O && atom_inventory["HYDROGEN"]>=needed_H) {
        4:   96:        atom_inventory["CARBON"]-=needed_C;
        4:   97:        atom_inventory["OXYGEN"]-=needed_O;
        4:   98:        atom_inventory["HYDROGEN"]-=needed_H;
        4:   99:        atom_inventory[molecule_name]+=number;
        4:  100:        print_inventory();
        4:  101:        return true;
        -:  102:    }
        1:  103:    std::cerr << "Not enough atoms" << std::endl;
        1:  104:    return false;
        8:  105:}
        -:  106:
        6:  107:void process_console_command(const std::string &cmd) {
        6:  108:    unsigned long long w=atom_inventory["WATER"], c=atom_inventory["CARBON DIOXIDE"],
        6:  109:            a=atom_inventory["ALCOHOL"], g=atom_inventory["GLUCOSE"];
        6:  110:    if (cmd=="GEN SOFT DRINK")
        1:  111:        std::cout<<"SOFT DRINKs: "<<std::min({w,c,g})<<std::endl;
        5:  112:    else if (cmd=="GEN VODKA")
        1:  113:        std::cout<<"VODKA: "<<std::min({w,a,g})<<std::endl;
        4:  114:    else if (cmd=="GEN CHAMPAGNE")
        1:  115:        std::cout<<"CHAMPAGNE: "<<std::min({w,c,a})<<std::endl;
        -:  116:    else
        3:  117:        std::cerr << "Invalid console command!" << std::endl;
        6:  118:}
        -:  119:
       11:  120:int main(int argc, char *argv[]) {
        -:  121:    int opt;
       11:  122:    struct option long_opts[] = {
        -:  123:            {"tcp-port", required_argument, nullptr, 'T'},
        -:  124:            {"udp-port", required_argument, nullptr, 'U'},
        -:  125:            {"stream-path", required_argument, nullptr, 's'},
        -:  126:            {"datagram-path", required_argument, nullptr, 'd'},
        -:  127:            {"carbon", required_argument, nullptr, 'c'},
        -:  128:            {"oxygen", required_argument, nullptr, 'o'},
        -:  129:            {"hydrogen", required_argument, nullptr, 'h'},
        -:  130:            {"timeout", required_argument, nullptr, 't'},
        -:  131:            {nullptr, 0, nullptr, 0}
        -:  132:    };
        -:  133:
        -:  134:    // אתחול ראשוני
       11:  135:    tcp_port = -1;
       11:  136:    udp_port = -1;
       11:  137:    timeout_sec = 0;
       11:  138:    uds_stream_path.clear();
       11:  139:    uds_dgram_path.clear();
        -:  140:
       54:  141:    while ((opt = getopt_long(argc, argv, "T:U:s:d:c:o:h:t:", long_opts, nullptr)) != -1) {
       47:  142:        switch (opt) {
        7:  143:            case 'T': tcp_port = std::stoi(optarg); break;
        7:  144:            case 'U': udp_port = std::stoi(optarg); break;
        1:  145:            case 's': uds_stream_path = optarg; break;
        4:  146:            case 'd': uds_dgram_path = optarg; break;
        8:  147:            case 'c': atom_inventory["CARBON"] = std::stoull(optarg); break;
        8:  148:            case 'o': atom_inventory["OXYGEN"] = std::stoull(optarg); break;
        8:  149:            case 'h': atom_inventory["HYDROGEN"] = std::stoull(optarg); break;
    #####:  150:            case 't': timeout_sec = std::stoi(optarg); break;
        4:  151:            default:
        -:  152:                std::cerr << "Usage error: " << argv[0]
        -:  153:                          << " [-T tcp_port] [-U udp_port] [-s uds_stream_path] [-d uds_dgram_path]"
        4:  154:                          << " [-c carbon] [-o oxygen] [-h hydrogen] [-t timeout]" << std::endl;
        4:  155:                return 1;
        -:  156:        }
        -:  157:    }
        -:  158:
        -:  159:    // בדיקת התנגשויות בין tcp ו uds stream
        7:  160:    if (tcp_port != -1 && !uds_stream_path.empty()) {
        1:  161:        std::cerr << "Error: Cannot specify both TCP port (-T) and UNIX stream socket (-s)." << std::endl;
        1:  162:        return 1;
        -:  163:    }
        -:  164:    // בדיקת התנגשויות בין udp ו uds datagram
        6:  165:    if (udp_port != -1 && !uds_dgram_path.empty()) {
        2:  166:        std::cerr << "Error: Cannot specify both UDP port (-U) and UNIX datagram socket (-d)." << std::endl;
        2:  167:        return 1;
        -:  168:    }
        -:  169:    // חייב להיות לפחות TCP או uds stream
        4:  170:    if (tcp_port == -1 && uds_stream_path.empty()) {
        2:  171:        std::cerr << "Error: Must specify TCP port (-T) or UNIX stream socket (-s)." << std::endl;
        2:  172:        return 1;
        -:  173:    }
        -:  174:    // חייב להיות לפחות UDP או uds datagram
       2*:  175:    if (udp_port == -1 && uds_dgram_path.empty()) {
    #####:  176:        std::cerr << "Error: Must specify UDP port (-U) or UNIX datagram socket (-d)." << std::endl;
    #####:  177:        return 1;
        -:  178:    }
        -:  179:
        2:  180:    if (timeout_sec > 0) {
    #####:  181:        signal(SIGALRM, handle_alarm);
    #####:  182:        alarm(timeout_sec);
        -:  183:    }
        -:  184:
        2:  185:    int tcp_sock = -1;
        2:  186:    if (tcp_port != -1) {
        2:  187:        tcp_sock = socket(AF_INET, SOCK_STREAM, 0);
        2:  188:        int optval = 1;
        2:  189:        setsockopt(tcp_sock, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval));
        2:  190:        sockaddr_in addr{};
        2:  191:        addr.sin_family = AF_INET;
        2:  192:        addr.sin_addr.s_addr = INADDR_ANY;
        2:  193:        addr.sin_port = htons(tcp_port);
        2:  194:        if (bind(tcp_sock, (sockaddr*)&addr, sizeof(addr)) == -1) {
    #####:  195:            perror("bind tcp");
    #####:  196:            exit(1);
        -:  197:        }
        2:  198:        if (listen(tcp_sock, MAX_CLIENTS) == -1) {
    #####:  199:            perror("listen tcp");
    #####:  200:            exit(1);
        -:  201:        }
        2:  202:        std::cout << "TCP socket listening on port " << tcp_port << std::endl;
        -:  203:    }
        -:  204:
        2:  205:    int udp_sock = -1;
        2:  206:    if (udp_port != -1) {
    #####:  207:        udp_sock = socket(AF_INET, SOCK_DGRAM, 0);
    #####:  208:        sockaddr_in addr{};
    #####:  209:        addr.sin_family = AF_INET;
    #####:  210:        addr.sin_addr.s_addr = INADDR_ANY;
    #####:  211:        addr.sin_port = htons(udp_port);
    #####:  212:        if (bind(udp_sock, (sockaddr*)&addr, sizeof(addr)) == -1) {
    #####:  213:            perror("bind udp");
    #####:  214:            exit(1);
        -:  215:        }
    #####:  216:        std::cout << "UDP socket listening on port " << udp_port << std::endl;
        -:  217:    }
        -:  218:
        2:  219:    int uds_stream_sock = -1;
        2:  220:    if (!uds_stream_path.empty()) {
    #####:  221:        unlink(uds_stream_path.c_str());
    #####:  222:        uds_stream_sock = socket(AF_UNIX, SOCK_STREAM, 0);
    #####:  223:        sockaddr_un addr{};
    #####:  224:        addr.sun_family = AF_UNIX;
    #####:  225:        strncpy(addr.sun_path, uds_stream_path.c_str(), sizeof(addr.sun_path) - 1);
    #####:  226:        addr.sun_path[sizeof(addr.sun_path) - 1] = '\0';
    #####:  227:        if (bind(uds_stream_sock, (sockaddr*)&addr, sizeof(addr)) == -1) {
    #####:  228:            perror("bind uds_stream");
    #####:  229:            exit(1);
        -:  230:        }
    #####:  231:        if (listen(uds_stream_sock, MAX_CLIENTS) == -1) {
    #####:  232:            perror("listen uds_stream");
    #####:  233:            exit(1);
        -:  234:        }
    #####:  235:        std::cout << "UNIX stream socket created at: " << uds_stream_path << std::endl;
        -:  236:    }
        -:  237:
        2:  238:    int uds_dgram_sock = -1;
        2:  239:    if (!uds_dgram_path.empty()) {
        2:  240:        unlink(uds_dgram_path.c_str());
        2:  241:        uds_dgram_sock = socket(AF_UNIX, SOCK_DGRAM, 0);
        2:  242:        sockaddr_un addr{};
        2:  243:        addr.sun_family = AF_UNIX;
        2:  244:        strncpy(addr.sun_path, uds_dgram_path.c_str(), sizeof(addr.sun_path) - 1);
        2:  245:        addr.sun_path[sizeof(addr.sun_path) - 1] = '\0';
        2:  246:        if (bind(uds_dgram_sock, (sockaddr*)&addr, sizeof(addr)) == -1) {
    #####:  247:            perror("bind uds_dgram");
    #####:  248:            exit(1);
        -:  249:        }
        2:  250:        std::cout << "UNIX datagram socket created at: " << uds_dgram_path << std::endl;
        -:  251:    }
        -:  252:
        -:  253:    fd_set master, read_fds;
       34:  254:    FD_ZERO(&master);
        2:  255:    if (tcp_sock != -1) FD_SET(tcp_sock, &master);
       2*:  256:    if (udp_sock != -1) FD_SET(udp_sock, &master);
       2*:  257:    if (uds_stream_sock != -1) FD_SET(uds_stream_sock, &master);
        2:  258:    if (uds_dgram_sock != -1) FD_SET(uds_dgram_sock, &master);
        2:  259:    FD_SET(STDIN_FILENO, &master);
        2:  260:    int fdmax = std::max({tcp_sock, udp_sock, uds_stream_sock, uds_dgram_sock, STDIN_FILENO});
        -:  261:
        2:  262:    std::cout << "Server started!" << std::endl;
        2:  263:    print_inventory();
        -:  264:
        -:  265:    while (true) {
       33:  266:        read_fds = master;
       33:  267:        if (select(fdmax + 1, &read_fds, nullptr, nullptr, nullptr) == -1) {
    #####:  268:            perror("select");
    #####:  269:            exit(1);
        -:  270:        }
      33*:  271:        if (timeout_sec > 0) alarm(timeout_sec);
        -:  272:
      219:  273:        for (int i = 0; i <= fdmax; i++) {
      188:  274:            if (FD_ISSET(i, &read_fds)) {
        -:  275:                // UDS Datagram
       33:  276:                if (i == uds_dgram_sock) {
        -:  277:                    char buf[BUFFER_SIZE];
        8:  278:                    sockaddr_un cli_addr{};
        8:  279:                    socklen_t len = sizeof(cli_addr);
        8:  280:                    int n = recvfrom(i, buf, sizeof(buf) - 1, 0, (sockaddr*)&cli_addr, &len);
        8:  281:                    buf[n] = '\0';
        8:  282:                    bool success = process_udp_command(buf);
        8:  283:                    std::string r = success ? "DELIVERED" : "FAILED";
        8:  284:                    sendto(i, r.c_str(), r.size(), 0, (sockaddr*)&cli_addr, len);
        8:  285:                }
        -:  286:                    // UDP
       25:  287:                else if (i == udp_sock) {
        -:  288:                    char buf[BUFFER_SIZE];
    #####:  289:                    sockaddr_in cli_addr{};
    #####:  290:                    socklen_t len = sizeof(cli_addr);
    #####:  291:                    int n = recvfrom(i, buf, sizeof(buf) - 1, 0, (sockaddr*)&cli_addr, &len);
    #####:  292:                    buf[n] = '\0';
    #####:  293:                    bool success = process_udp_command(buf);
    #####:  294:                    std::string r = success ? "DELIVERED" : "FAILED";
    #####:  295:                    sendto(i, r.c_str(), r.size(), 0, (sockaddr*)&cli_addr, len);
    #####:  296:                }
        -:  297:                    // UDS Stream & TCP (accept)
       25:  298:                else if (i == uds_stream_sock || i == tcp_sock) {
        2:  299:                    sockaddr_storage cli_addr{};
        2:  300:                    socklen_t len = sizeof(cli_addr);
        2:  301:                    int new_fd = accept(i, (sockaddr*)&cli_addr, &len);
        2:  302:                    if (new_fd != -1) {
        2:  303:                        FD_SET(new_fd, &master);
        2:  304:                        if (new_fd > fdmax) fdmax = new_fd;
        2:  305:                        std::cout << "New client connected (fd: " << new_fd << ")" << std::endl;
        -:  306:                    }
        2:  307:                }
        -:  308:                    // STDIN
       23:  309:                else if (i == STDIN_FILENO) {
        8:  310:                    std::string line;
        8:  311:                    std::getline(std::cin, line);
        8:  312:                    if(line =="exit" || line == "quit") {
        2:  313:                        std::cout << "Shutting down server." << std::endl;
        2:  314:                        exit(0);
        -:  315:                    }
        6:  316:                    process_console_command(line);
        6:  317:                }
        -:  318:                    // TCP/UDS Stream data
        -:  319:                else {
        -:  320:                    char buf[BUFFER_SIZE];
       15:  321:                    int n = recv(i, buf, sizeof(buf) - 1, 0);
       15:  322:                    if (n <= 0) {
        2:  323:                        close(i);
        2:  324:                        FD_CLR(i, &master);
        -:  325:                    } else {
       13:  326:                        buf[n] = '\0';
       13:  327:                        process_tcp_command(buf);
        -:  328:                    }
        -:  329:                }
        -:  330:            }
        -:  331:        }
       31:  332:    }
        -:  333:
        -:  334:    return 0;
        -:  335:}
