        -:    0:Source:supplier_atom.cpp
        -:    0:Graph:supplier_atom.gcno
        -:    0:Data:supplier_atom.gcda
        -:    0:Runs:4
        -:    1:#include <iostream>
        -:    2:#include <string>
        -:    3:#include <cstring>
        -:    4:#include <cstdlib>
        -:    5:#include <unistd.h>
        -:    6:#include <netdb.h>
        -:    7:#include <sys/un.h>
        -:    8:#include <getopt.h>
        -:    9:
        -:   10:#define BUFFER_SIZE 1024
        -:   11:
        4:   12:int main(int argc, char *argv[]) {
        4:   13:    std::string hostname, port_str, sockfile;
        -:   14:    int opt;
        4:   15:    struct option long_opts[] = {
        -:   16:            {"host", required_argument, nullptr, 'h'},
        -:   17:            {"port", required_argument, nullptr, 'p'},
        -:   18:            {"file", required_argument, nullptr, 'f'},
        -:   19:            {nullptr, 0, nullptr, 0}
        -:   20:    };
        -:   21:
       10:   22:    while ((opt = getopt_long(argc, argv, "h:p:f:", long_opts, nullptr)) != -1) {
        6:   23:        switch (opt) {
        3:   24:            case 'h': hostname = optarg; break;
        3:   25:            case 'p': port_str = optarg; break;
    #####:   26:            case 'f': sockfile = optarg; break;
    #####:   27:            default:
    #####:   28:                std::cerr << "Usage: " << argv[0] << " [-h <hostname> -p <port>] | [-f <socket_file>]" << std::endl;
    #####:   29:                return 1;
        -:   30:        }
        -:   31:    }
        -:   32:
       4*:   33:    if ((!hostname.empty() || !port_str.empty()) && !sockfile.empty()) {
    #####:   34:        std::cerr << "Error: cannot specify both hostname/port and socket file (-f)." << std::endl;
    #####:   35:        return 1;
        -:   36:    }
        -:   37:
        4:   38:    int sock = -1;
        4:   39:    if (!sockfile.empty()) {
    #####:   40:        std::cout << "Connecting to UNIX socket: " << sockfile << std::endl;
    #####:   41:        sock = socket(AF_UNIX, SOCK_STREAM, 0);
    #####:   42:        sockaddr_un addr{};
    #####:   43:        addr.sun_family = AF_UNIX;
    #####:   44:        strcpy(addr.sun_path, sockfile.c_str());
    #####:   45:        if (connect(sock, (sockaddr*)&addr, sizeof(addr)) == -1) {
    #####:   46:            perror("connect");
    #####:   47:            return 1;
        -:   48:        }
        -:   49:    } else {
        4:   50:        if (hostname.empty() || port_str.empty()) {
        1:   51:            std::cerr << "Hostname/port or socket file is required!" << std::endl;
        1:   52:            return 1;
        -:   53:        }
        3:   54:        std::cout << "Connecting to " << hostname << ":" << port_str << std::endl;
        3:   55:        struct addrinfo hints{}, *res;
        3:   56:        hints.ai_family = AF_UNSPEC;
        3:   57:        hints.ai_socktype = SOCK_STREAM;
        3:   58:        int err = getaddrinfo(hostname.c_str(), port_str.c_str(), &hints, &res);
        3:   59:        if (err != 0) {
    #####:   60:            std::cerr << "getaddrinfo: " << gai_strerror(err) << std::endl;
    #####:   61:            return 1;
        -:   62:        }
        3:   63:        sock = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
        3:   64:        if (connect(sock, res->ai_addr, res->ai_addrlen) == -1) {
    #####:   65:            perror("connect");
    #####:   66:            freeaddrinfo(res);
    #####:   67:            return 1;
        -:   68:        }
        3:   69:        freeaddrinfo(res);
        -:   70:    }
        -:   71:
        3:   72:    std::string input;
        -:   73:    while (true) {
       22:   74:        std::cout << "Enter TCP command (or 'exit'): ";
       22:   75:        std::getline(std::cin, input);
       22:   76:        if (input == "exit") break;
       19:   77:        std::cout << "Sending: [" << input << "]" << std::endl;
       19:   78:        send(sock, input.c_str(), input.size(), 0);
        -:   79:    }
        -:   80:
        3:   81:    close(sock);
        3:   82:    return 0;
        4:   83:}
