        -:    0:Source:supplier_molecule.cpp
        -:    0:Graph:supplier_molecule.gcno
        -:    0:Data:supplier_molecule.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include <string>
        -:    3:#include <sstream>
        -:    4:#include <cstring>
        -:    5:#include <cstdlib>
        -:    6:#include <unordered_map>
        -:    7:#include <unistd.h>
        -:    8:#include <arpa/inet.h>
        -:    9:#include <sys/socket.h>
        -:   10:#include <sys/select.h>
        -:   11:
        -:   12:#define MAX_CLIENTS 100
        -:   13:#define BUFFER_SIZE 1024
        -:   14:
        -:   15:std::unordered_map<std::string, unsigned long long> atom_inventory;
        -:   16:const unsigned long long MAX_ATOMS = 1000000000000000000ULL; // 10^18
        -:   17:
        7:   18:void print_inventory() {
        7:   19:    std::cout << "Inventory:" << std::endl;
       35:   20:    for (const auto &pair : atom_inventory) {
       28:   21:        std::cout << pair.first << ": " << pair.second << std::endl;
        -:   22:    }
        7:   23:}
        -:   24:
        5:   25:void process_tcp_command(const std::string &cmd) {
        5:   26:    std::istringstream iss(cmd);
        5:   27:    std::string action, atom;
        -:   28:    unsigned long long number;
        -:   29:
        5:   30:    if (iss >> action >> atom >> number && action == "ADD") {
        4:   31:        if (atom != "CARBON" && atom != "OXYGEN" && atom != "HYDROGEN") {
        1:   32:            std::cerr << "Invalid atom type! Only CARBON, OXYGEN, and HYDROGEN are allowed." << std::endl;
        1:   33:            return;
        -:   34:        }
        3:   35:        if (atom_inventory[atom] + number <= MAX_ATOMS) {
        3:   36:            atom_inventory[atom] += number;
        -:   37:        } else {
    #####:   38:            atom_inventory[atom] = MAX_ATOMS;
        -:   39:        }
        3:   40:        print_inventory();
        -:   41:    } else {
        1:   42:        std::cerr << "Invalid TCP command!" << std::endl;
        -:   43:    }
        7:   44:}
        -:   45:
        6:   46:bool process_udp_command(const std::string &cmd) {
        6:   47:    std::istringstream iss(cmd);
        6:   48:    std::string action, molecule;
        -:   49:    unsigned long long number;
        -:   50:
        6:   51:    if (!(iss >> action)) {
    #####:   52:        std::cerr << "Invalid UDP command!" << std::endl;
    #####:   53:        return false;
        -:   54:    }
        -:   55:
        6:   56:    if (action != "DELIVER") {
        1:   57:        std::cerr << "Invalid action! need to start with DELIVER" << std::endl;
        1:   58:        return false;
        -:   59:    }
        -:   60:
        5:   61:    if (!(iss >> molecule)) {
    #####:   62:        std::cerr << "Invalid UDP command!" << std::endl;
    #####:   63:        return false;
        -:   64:    }
        -:   65:
        5:   66:    unsigned long long needed_C=0, needed_O=0, needed_H=0;
        5:   67:    std::string molecule_name = molecule;
        -:   68:
        5:   69:    if (molecule == "CARBON") {
        1:   70:        std::string second_word;
       1*:   71:        if (!(iss >> second_word) || second_word != "DIOXIDE") {
    #####:   72:            std::cerr << "Invalid molecule! Expected 'CARBON DIOXIDE'" << std::endl;
    #####:   73:            return false;
        -:   74:        }
        1:   75:        molecule_name = "CARBON DIOXIDE";
        1:   76:    }
        -:   77:
        5:   78:    if (!(iss >> number)) {
    #####:   79:        std::cerr << "Missing number!" << std::endl;
    #####:   80:        return false;
        -:   81:    }
        -:   82:
        5:   83:    if (molecule_name == "WATER") {
        1:   84:        needed_H=2*number; needed_O=1*number;
        4:   85:    } else if (molecule_name == "ALCOHOL") {
        1:   86:        needed_C=2*number; needed_H=6*number; needed_O=1*number;
        3:   87:    } else if (molecule_name == "GLUCOSE") {
        1:   88:        needed_C=6*number; needed_H=12*number; needed_O=6*number;
        2:   89:    } else if (molecule_name == "CARBON DIOXIDE") {
        1:   90:        needed_C=1*number; needed_O=2*number;
        -:   91:    } else {
        1:   92:        std::cerr << "Invalid molecule!" << std::endl;
        1:   93:        return false;
        -:   94:    }
        -:   95:
        8:   96:    if (atom_inventory["CARBON"] >= needed_C &&
      16*:   97:        atom_inventory["OXYGEN"] >= needed_O &&
        8:   98:        atom_inventory["HYDROGEN"] >= needed_H) {
        4:   99:        atom_inventory["CARBON"] -= needed_C;
        4:  100:        atom_inventory["OXYGEN"] -= needed_O;
        4:  101:        atom_inventory["HYDROGEN"] -= needed_H;
        4:  102:        atom_inventory[molecule_name] += number;
        4:  103:        print_inventory();
        4:  104:        return true;
        -:  105:    } else {
    #####:  106:        std::cerr << "Not enough atoms" << std::endl;
    #####:  107:        return false;
        -:  108:    }
        6:  109:}
        -:  110:
        1:  111:int main(int argc, char *argv[]) {
        1:  112:    if (argc != 3) {
    #####:  113:        std::cerr << "Usage: " << argv[0] << " <tcp_port> <udp_port>" << std::endl;
    #####:  114:        return 1;
        -:  115:    }
        1:  116:    int tcp_port = std::stoi(argv[1]);
        1:  117:    int udp_port = std::stoi(argv[2]);
        -:  118:
        1:  119:    int tcp_sock = socket(AF_INET, SOCK_STREAM, 0);
        1:  120:    int opt = 1;
        1:  121:    setsockopt(tcp_sock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
        -:  122:
        1:  123:    sockaddr_in tcp_addr{};
        1:  124:    tcp_addr.sin_family = AF_INET;
        1:  125:    tcp_addr.sin_addr.s_addr = INADDR_ANY;
        1:  126:    tcp_addr.sin_port = htons(tcp_port);
        1:  127:    bind(tcp_sock, (sockaddr*)&tcp_addr, sizeof(tcp_addr));
        1:  128:    listen(tcp_sock, MAX_CLIENTS);
        -:  129:
        1:  130:    int udp_sock = socket(AF_INET, SOCK_DGRAM, 0);
        1:  131:    sockaddr_in udp_addr{};
        1:  132:    udp_addr.sin_family = AF_INET;
        1:  133:    udp_addr.sin_addr.s_addr = INADDR_ANY;
        1:  134:    udp_addr.sin_port = htons(udp_port);
        1:  135:    bind(udp_sock, (sockaddr*)&udp_addr, sizeof(udp_addr));
        -:  136:
        -:  137:    fd_set master_set, read_fds;
       17:  138:    FD_ZERO(&master_set);
        1:  139:    FD_SET(tcp_sock, &master_set);
        1:  140:    FD_SET(udp_sock, &master_set);
        1:  141:    FD_SET(STDIN_FILENO, &master_set);  // Added stdin monitoring
        1:  142:    int fdmax = std::max(tcp_sock, std::max(udp_sock, STDIN_FILENO));
        -:  143:
        -:  144:
        1:  145:    std::cout << "Server started! TCP port: " << tcp_port << ", UDP port: " << udp_port << std::endl;
        -:  146:
        1:  147:    bool running = true;
       15:  148:    while (running) {
       14:  149:        read_fds = master_set;
       14:  150:        if (select(fdmax + 1, &read_fds, nullptr, nullptr, nullptr) == -1) {
    #####:  151:            perror("select");
    #####:  152:            exit(1);
        -:  153:        }
        -:  154:
       92:  155:        for (int i = 0; i <= fdmax; i++) {
       79:  156:            if (FD_ISSET(i, &read_fds)) {
       14:  157:                if (i == tcp_sock) {
        1:  158:                    sockaddr_in cli_addr{};
        1:  159:                    socklen_t cli_len = sizeof(cli_addr);
        1:  160:                    int new_fd = accept(tcp_sock, (sockaddr*)&cli_addr, &cli_len);
        1:  161:                    if (new_fd != -1) {
        1:  162:                        FD_SET(new_fd, &master_set);
        1:  163:                        if (new_fd > fdmax) fdmax = new_fd;
        1:  164:                        std::cout << "New TCP client connected." << std::endl;
        -:  165:                    }
       13:  166:                } else if (i == udp_sock) {
        -:  167:                    char buf[BUFFER_SIZE];
        6:  168:                    sockaddr_in client_addr{};
        6:  169:                    socklen_t len = sizeof(client_addr);
        6:  170:                    int n = recvfrom(udp_sock, buf, sizeof(buf)-1, 0, (sockaddr*)&client_addr, &len);
        6:  171:                    buf[n] = '\0';
        -:  172:
       12:  173:                    std::string response = process_udp_command(std::string(buf)) ? "DELIVERED" : "FAILED";
        6:  174:                    sendto(udp_sock, response.c_str(), response.size(), 0, (sockaddr*)&client_addr, len);
       13:  175:                } else if (i == STDIN_FILENO) {
        1:  176:                    std::string input_line;
        1:  177:                    if (std::getline(std::cin, input_line)) {
        1:  178:                        if (input_line == "exit") {
        1:  179:                            std::cout << "Exit command received. Shutting down server." << std::endl;
        1:  180:                            running = false;
        1:  181:                            break;
        -:  182:                        } else {
    #####:  183:                            std::cout << "Unknown command: " << input_line << std::endl;
        -:  184:                        }
        -:  185:                    } else {
    #####:  186:                        std::cout << "Input closed. Shutting down server." << std::endl;
    #####:  187:                        running = false;
    #####:  188:                        break;
        -:  189:                    }
       1*:  190:                } else {
        -:  191:                    char buf[BUFFER_SIZE];
        6:  192:                    int nbytes = recv(i, buf, sizeof(buf)-1, 0);
        6:  193:                    if (nbytes <= 0) {
        1:  194:                        std::cout << "TCP client disconnected." << std::endl;
        1:  195:                        close(i);
        1:  196:                        FD_CLR(i, &master_set);
        -:  197:                    } else {
        5:  198:                        buf[nbytes] = '\0';
        5:  199:                        process_tcp_command(std::string(buf));
        -:  200:                    }
        -:  201:                }
        -:  202:            }
        -:  203:        }
        -:  204:    }
        -:  205:
        1:  206:    close(tcp_sock);
        1:  207:    close(udp_sock);
        -:  208:
        1:  209:    std::cout << "Server has shut down gracefully." << std::endl;
        1:  210:    return 0;
        -:  211:}
